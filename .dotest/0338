From 554aaed35bc18e07d8e86b10ada2e071a3408439 Mon Sep 17 00:00:00 2001
From: charles <charles@oneblackbear.com>
Date: Thu, 10 Apr 2008 16:47:36 +0100
Subject: changes: updated pagination model to take into account of new models; added new page function to wax model for pagination, works like all and triggers the sql; changed the mysql adaptor class to include found row counting SQL_CALC_FOUND_ROWS

---
 wax/db/WaxDbAdapter.php          |   13 ++++++++++++-
 wax/db/WaxModel.php              |    7 ++++++-
 wax/db/WaxPaginatedRecordset.php |   20 +++++++++++++++++++-
 3 files changed, 37 insertions(+), 3 deletions(-)

diff --git a/wax/db/WaxDbAdapter.php b/wax/db/WaxDbAdapter.php
index 01674ba68ff592932fc2a5244acc44288ca88b6a..7263bbf33329fafdb268c113e7fec9e0a681bf77 100644
--- a/wax/db/WaxDbAdapter.php
+++ b/wax/db/WaxDbAdapter.php
@@ -79,13 +79,24 @@ abstract class WaxDbAdapter {
   public function select(WaxModel $model) {
     $sql .= "SELECT ";
     if(count($this->columns)) $sql.= join(",", $this->columns) ;
+		//mysql extra - if limit then record the number of rows found without limits
+		elseif($model->limit > 0) $sql .= "SQL_CALC_FOUND_ROWS *";
     else $sql.= "*";
     $sql.= " FROM `{$model->table}`";
     if(count($model->filters)) $sql.= " WHERE ".join(" AND ", $model->filters);    
     if($model->order) $sql.= "ORDER BY {$model->order}";
     if($model->limit) $sql.= " LIMIT {$model->offset}, {$model->limit}";
     $stmt = $this->db->prepare($sql);
-    if($this->exec($stmt)) return $stmt->fetchAll(PDO::FETCH_ASSOC);
+		//altered to include extra mysql found rows data
+		if($model->limit >0 && $this->exec($stmt)){
+			$res = $stmt->fetchAll(PDO::FETCH_ASSOC);
+			$extrastmt = $this->db->prepare("SELECT FOUND_ROWS()");
+			$this->exec($extrastmt);
+			$found = $extrastmt->fetchAll(PDO::FETCH_ASSOC);
+			$res['total_without_limits'] = $found[0]['FOUND_ROWS()'];
+			return $res;
+		}
+    elseif($this->exec($stmt)) return $stmt->fetchAll(PDO::FETCH_ASSOC);
   }
   
   
diff --git a/wax/db/WaxModel.php b/wax/db/WaxModel.php
index 0aab46887ae206cf0cbd1214fc0a9b85eec44be3..1313ee15c88e736f0789831d29debb2c4368ef0f 100644
--- a/wax/db/WaxModel.php
+++ b/wax/db/WaxModel.php
@@ -24,8 +24,8 @@ class WaxModel {
   public $limit = false;
   public $offset = "0";
   public $errors = array();
- 
 
+	
   /**
    *  constructor
    *  @param  mixed   param   PDO instance,
@@ -169,6 +169,11 @@ class WaxModel {
 		return $this;
 	}
 	
+	//take the page number, number to show per page, return paginated record set..
+	public function page($page_number, $per_page){
+		return new WaxPaginatedRecordset($this, $page_number, $per_page);
+	}
+	
   public function update( $id_list = array() ) {
     $this->before_update();
     $res = $this->db->update($this);
diff --git a/wax/db/WaxPaginatedRecordset.php b/wax/db/WaxPaginatedRecordset.php
index b21688b1fee6962fd77abbd2ba53b1e088d70d9b..950b866cc2c45b0b772a6b6ec62919f6e86933f1 100644
--- a/wax/db/WaxPaginatedRecordset.php
+++ b/wax/db/WaxPaginatedRecordset.php
@@ -7,12 +7,30 @@
  **/
 
 
-class WaxPaginatedRecordset extends WXRecordset {
+class WaxPaginatedRecordset extends WaxRecordset {
   
   public $current_page=1;
   public $total_pages=false;
   public $per_page=false;
   public $count=false;
+
+	public function __construct(WaxModel $model, $page, $per_page) {
+		$this->per_page = $per_page;
+		//setup model 
+    $this->model = $model;	
+		$this->model->offset = ($page * $per_page);
+		$this->model->limit = $per_page;
+		//paginate the model
+		$rowset = $this->paginate($model);
+		$this->set_count($rowset['total_without_limits']);
+		parent::__construct($model, $rowset);
+  }
+
+	public function paginate(WaxModel $model){
+		$newmodel = clone $model;
+		return $newmodel->all()->rowset;
+	}
+	
   public function set_count($count) {
     $this->count = $count;
     $this->total_pages = ceil($count / $this->per_page);
-- 
1.5.4


